{"version":3,"sources":["components/style.js","components/play.js","components/padbank.js","components/data.js","App.js","serviceWorker.js","index.js"],"names":["activeStyle","backgroundColor","boxShadow","marginTop","inactiveStyle","PlaySound","props","state","panelStyle","handleKeyPress","bind","playSound","activatePad","document","addEventListener","this","removeEventListener","e","keyCode","setState","sound","getElementById","keyTrigger","currentTime","play","setTimeout","updateDisplay","clipId","replace","id","onClick","className","style","src","clip","React","Component","PadData","padData","currentPadData","map","drumObj","i","padDataArr","url","key","bankOne","bankTwo","App","display","String","fromCharCode","currentPadDataId","sliderVal","displayClipName","selectBank","adjustVolume","clearDisplay","name","target","value","Math","round","bankSlider","float","slice","call","getElementsByClassName","forEach","volume","clipVolumee","type","min","max","step","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b580c2e8.chunk.js","sourcesContent":["const activeStyle = {\n    backgroundColor: 'grey',\n    boxShadow: \"0 3px orange\",\n    marginTop: 10\n  }\n\nconst inactiveStyle = {\n    backgroundColor: 'grey',\n    marginTop: 10,\n    boxShadow: \"3px 3px 0px black\"\n}\nexport {activeStyle, inactiveStyle};","import React from 'react';\nimport {activeStyle, inactiveStyle} from './style';\n\nclass PlaySound extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      panelStyle: inactiveStyle\n    }\n  this.handleKeyPress = this.handleKeyPress.bind(this);\n  this.playSound = this.playSound.bind(this);\n  this.activatePad = this.activatePad.bind(this);\n  }\n\ncomponentDidMount() {\n  document.addEventListener('keydown', this.handleKeyPress);\n}\ncomponentWillUnmount() {\n  document.removeEventListener('keydown', this.handleKeyPress);\n}\n\nhandleKeyPress(e){\n  if (e.keyCode === this.props.keyCode){\n    this.playSound();\n  }\n}\nactivatePad(){\n  this.state.panelStyle.boxShadow === '0 3px orange' ?\n  this.setState ({panelStyle: inactiveStyle}) : this.setState({panelStyle: activeStyle})\n}\nplaySound(e) {\n  const sound = document.getElementById(this.props.keyTrigger);\n  sound.currentTime = 0;\n  sound.play();\n  this.activatePad();\n  setTimeout(() => this.activatePad(), 100);\n  this.props.updateDisplay(this.props.clipId.replace(/-/g, ' '));\n}\n\nrender(){\n  return(\n    <div id={this.props.clipId}\n    onClick={this.playSound}\n    className='drum-pad'\n    style={this.state.panelStyle}>\n    <audio className='clip'\n    id={this.props.keyTrigger}\n    src={this.props.clip}></audio>\n    {this.props.keyTrigger}\n    </div>\n  )\n}\n}\n\nexport default PlaySound;","import React from 'react';\nimport PlaySound from './play';\n\nclass PadData extends React.Component{\n  render() {\n    var padData;\n    padData = this.props.currentPadData.map((drumObj, i, padDataArr) => {\n      return (\n        <PlaySound clipId={padDataArr[i].id}\n                   clip ={padDataArr[i].url}\n                   keyTrigger ={padDataArr[i].keyTrigger}\n                   keyCode={padDataArr[i].keyCode}\n                   key={padDataArr[i].keyTrigger}\n                   updateDisplay={this.props.updateDisplay} />\n      )\n    })\n    return(\n      <div className='pad-bank'>\n        {padData}\n      </div>\n    )\n  }\n}\nexport default PadData;","const bankOne = [{\n    keyCode: 81,\n    keyTrigger: 'Q',\n    id: 'Heater-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n  }, {\n    keyCode: 87,\n    keyTrigger: 'W',\n    id: 'Heater-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n  }, {\n    keyCode: 69,\n    keyTrigger: 'E',\n    id: 'Heater-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n  }, {\n    keyCode: 65,\n    keyTrigger: 'A',\n    id: 'Heater-4',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n  }, {\n    keyCode: 83,\n    keyTrigger: 'S',\n    id: 'Clap',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n  }, {\n    keyCode: 68,\n    keyTrigger: 'D',\n    id: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n  }, {\n    keyCode: 90,\n    keyTrigger: 'Z',\n    id: \"Kick-n'-Hat\",\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n  }, {\n    keyCode: 88,\n    keyTrigger: 'X',\n    id: 'Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n  }, {\n    keyCode: 67,\n    keyTrigger: 'C',\n    id: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n  },\n];\n\nconst bankTwo = [{\n  keyCode: 81,\n  keyTrigger: 'Q',\n  id: 'Chord-1',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\n}, {\n  keyCode: 87,\n  keyTrigger: 'W',\n  id: 'Chord-2',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\n}, {\n  keyCode: 69,\n  keyTrigger: 'E',\n  id: 'Chord-3',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\n}, {\n  keyCode: 65,\n  keyTrigger: 'A',\n  id: 'Shaker',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\n}, {\n  keyCode: 83,\n  keyTrigger: 'S',\n  id: 'Open-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\n}, {\n  keyCode: 68,\n  keyTrigger: 'D',\n  id: 'Closed-HH',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\n}, {\n  keyCode: 90,\n  keyTrigger: 'Z',\n  id: 'Punchy-Kick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\n}, {\n  keyCode: 88,\n  keyTrigger: 'X',\n  id: 'Side-Stick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\n}, {\n  keyCode: 67,\n  keyTrigger: 'C',\n  id: 'Snare',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\n}];\n\nexport {bankOne, bankTwo};","import React from 'react';\nimport './App.min.css';\nimport PadData from './components/padbank';\nimport {bankOne, bankTwo} from './components/data';\nimport ReactFCCTest from 'react-fcctest';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: String.fromCharCode(160),\n      currentPadData: bankOne,\n      currentPadDataId: 'data one',\n      sliderVal: .3\n    }\n  this.displayClipName = this.displayClipName.bind(this);\n  this.selectBank = this.selectBank.bind(this);\n  this.adjustVolume = this.adjustVolume.bind(this);\n  this.clearDisplay = this.clearDisplay.bind(this);\n  }\n  selectBank(){\n    this.state.currentPadDataId === 'data one' ?\n    this.setState({\n      currentPadData: bankTwo,\n      display: 'data two',\n      currentPadDataId: 'data two'\n    }) :\n    this.setState({\n      currentPadData: bankOne,\n      display: 'data one',\n      currentPadDataId: 'data one'\n    });\n  }\n  displayClipName(name){\n    this.setState({\n      display: name\n    })\n  }\n  adjustVolume(e){\n    this.setState({\n      sliderVal: e.target.value,\n      display: \"Volume: \" + Math.round(e.target.value * 100)\n    });\n    setTimeout(()=>this.clearDisplay(), 100);\n  }\nclearDisplay(){\n  this.setState({\n    display: String.fromCharCode(160)\n  });\n}\nrender(){\n  const bankSlider = this.state.currentPadData === bankOne ? {float: 'left'} : {float: 'right'};\n  const clips = [].slice.call(document.getElementsByClassName('clip'));\n  clips.forEach(sound => {sound.volume = this.state.sliderVal});\n\nreturn (\n<div id='drum-machine' className='inner-container'>\n  <ReactFCCTest/>\n  <PadData  updateDisplay={this.displayClipName}\n            clipVolumee={this.state.sliderVal}\n            currentPadData={this.state.currentPadData} />\n\n        <div className=\"controls-container\">\n            <p id=\"display\">\n              {this.state.display}\n            </p>\n\t\t\t\t\t  <div className=\"volume-slider\">\n\t\t\t\t\t\t    <input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" value={this.state.sliderVal} onChange={this.adjustVolume} />\n\t\t\t\t\t  </div>\n\t\t\t\t\t  <div className=\"control\">\n\t\t\t\t\t\t  <p>Bank</p>\n\t\t\t\t\t\t  <div onClick={this.selectBank} className=\"select\">\n\t\t\t\t\t\t\t  <div style={bankSlider} className=\"inner\" />\n\t\t\t\t\t\t  </div>\n\t\t\t\t\t  </div>\n        </div>\n</div>\n)\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}